package com.project.restaurantorderservice.sagas.createorder;

import com.project.restaurantorderservice.messages.replies.CreateTicketReply;
import com.project.restaurantorderservice.sagaparticipants.AccountingServiceProxy;
import com.project.restaurantorderservice.sagaparticipants.ConsumerServiceProxy;
import com.project.restaurantorderservice.sagaparticipants.KitchenServiceProxy;
import com.project.restaurantorderservice.sagaparticipants.OrderServiceProxy;
import io.eventuate.tram.sagas.orchestration.SagaDefinition;
import io.eventuate.tram.sagas.simpledsl.SimpleSaga;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class CreateOrderSaga implements SimpleSaga<CreateOrderSagaState> {

    private final SagaDefinition<CreateOrderSagaState> sagaDefinition;

    @Autowired
    public CreateOrderSaga(OrderServiceProxy orderService,
                           ConsumerServiceProxy consumerService,
                           KitchenServiceProxy kitchenService,
                           AccountingServiceProxy accountingService) {

        this.sagaDefinition =
                step()
                        .withCompensation(orderService.reject,
                                CreateOrderSagaState::makeRejectOrderCommand)

                        .step()
                        .invokeParticipant(consumerService.validateOrder,
                                CreateOrderSagaState::makeValidateOrderByConsumerCommand)

                        .step()
                        .invokeParticipant(kitchenService.create,
                                CreateOrderSagaState::makeCreateTicketCommand)
                        .onReply(CreateTicketReply.class,
                                CreateOrderSagaState::handleCreateTicketReply)
                        .withCompensation(kitchenService.cancel,
                                CreateOrderSagaState::makeCancelCreateTicketCommand)

                        .step()
                        .invokeParticipant(accountingService.authorize,
                                CreateOrderSagaState::makeAuthorizeCommand)

                        .step()
                        .invokeParticipant(kitchenService.confirmCreate,
                                CreateOrderSagaState::makeConfirmCreateTicketCommand)

                        .step()
                        .invokeParticipant(orderService.approve,
                                CreateOrderSagaState::makeApproveOrderCommand)

                        .build();
    }

    @Override
    public SagaDefinition<CreateOrderSagaState> getSagaDefinition() {
        return sagaDefinition;
    }
}